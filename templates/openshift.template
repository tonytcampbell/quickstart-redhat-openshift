AWSTemplateFormatVersion: '2010-09-09'
Description: '(qs-1nltbq5f3) OpenShift+VPC, License: Apache 2.0 (Please do not remove)
  April, 6, 2018'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - RemoteAccessCIDR
          - ContainerAccessCIDR
      - Label:
          default: DNS Configuration
        Parameters:
          - DomainName
          - HostedZoneID
          - SubDomainPrefix
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
      - Label:
          default: OpenShift Nodes Configuration
        Parameters:
          - NumberOfMaster
          - NumberOfEtcd
          - NumberOfNodes
          - MasterInstanceType
          - EtcdInstanceType
          - NodesInstanceType
          - OpenShiftAdminPassword
      - Label:
          default: OpenShift Configuration
        Parameters:
          - OpenshiftContainerPlatformVersion
          - AWSServiceBroker
          - ExistingAWSServiceBrokerRole
          - HawkularMetrics
          - ClusterName
      - Label:
          default: Red Hat Subscription Information
        Parameters:
          - RedhatSubscriptionUserName
          - RedhatSubscriptionPassword
          - RedhatSubscriptionPoolID
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - OutputBucketName
      - Label:
          default: Integreatly Configuration
        Parameters:
          - IntegreatlyInstall
          - IntegreatlyReleaseVersion
    ParameterLabels:
      KeyPairName:
        default: SSH Key Name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PublicSubnet3ID:
        default: Public Subnet 3 ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      RemoteAccessCIDR:
        default: Allowed External Access CIDR (OCP UI)
      ContainerAccessCIDR:
        default: Allowed External Access CIDR (OCP Router)
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      OpenShiftAdminPassword:
        default: OpenShift UI Password
      RedhatSubscriptionUserName:
        default: Red Hat Subscription User Name
      RedhatSubscriptionPassword:
        default: Red Hat Subscription Password
      RedhatSubscriptionPoolID:
        default: Red Hat Pool ID
      OpenshiftContainerPlatformVersion:
        default: Openshift Container Platform Version
      MasterInstanceType:
        default: Master Instance Type
      EtcdInstanceType:
        default: Etcd Instance Type
      NodesInstanceType:
        default: Nodes Instance Type
      NumberOfMaster:
        default: Number of Masters
      NumberOfEtcd:
        default: Number of Etcds
      NumberOfNodes:
        default: Number of Nodes
      OutputBucketName:
        default: Output S3 Bucket Name
      AWSServiceBroker:
        default: AWS Service Broker
      ExistingAWSServiceBrokerRole:
        default: Existing AWS Service Broker Role ARN
      HawkularMetrics:
        default: Hawkular Metrics
      DomainName:
        default: Domain Name
      HostedZoneID:
        default: Route 53 Hosted Zone ID
      SubDomainPrefix:
        default: Subdomain Prefix
      ClusterName:
        default: Cluster Name
      IntegreatlyInstall:
        default: Automatically Install Integreatly after cluster is up
      IntegreatlyReleaseVersion:
        default: Integreatly Branch to Deploy
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3ID:
    Description: ID of public subnet 3 in Availability Zone 3 for the ELB load balancer
      (e.g., subnet-e324ad8e)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-redhat-openshift/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  OpenShiftAdminPassword:
    Description: Password for OpenShift Admin UI Must be at least 8 characters containing
      letters and (minimum 1 capital letter), numbers and symbols
    Type: String
    MinLength: '8'
    AllowedPattern: ^[^ \\']+$
    NoEcho: 'true'
  RedhatSubscriptionUserName:
    Description: Enter Redhat RHN User Name
    Type: String
  RedhatSubscriptionPassword:
    NoEcho: 'true'
    Description: Enter Redhat RHN Password
    Type: String
    AllowedPattern: ^[^ \\']+$
  RedhatSubscriptionPoolID:
    Description: Enter Redhat RHN PoolID
    Type: String
  OpenshiftContainerPlatformVersion:
    Description: OpenShift version to deploy
    Default: '3.7'
    Type: String
    AllowedValues:
      - '3.7'
      - '3.9'
      - '3.10'
      - '3.11'
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  MasterInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Master instances
    Type: String
  EtcdInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Etcd instances
    Type: String
  NodesInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  NumberOfMaster:
    Default: '3'
    Description: This Deployment requires 3 OpenShift Master instances
    Type: Number
    AllowedValues:
      - '3'
  NumberOfEtcd:
    Default: '3'
    Description: This Deployment requires 3 OpenShift Etcd instances
    Type: Number
    AllowedValues:
      - '3'
  NumberOfNodes:
    Default: '9'
    Description: The desired capacity for the OpenShift node instances
    Type: Number
  OutputBucketName:
    Description: 'OPTIONAL: Bucket Name where the zip file output should be placed,
      if left blank a bucket name will be automatically generated.'
    Type: String
    Default: ''
  AWSServiceBroker:
    Default: Enabled
    Description: Enable the AWS Service Broker
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  ExistingAWSServiceBrokerRole:
    Default: ''
    Description: 'OPTIONAL: Existing service role ARN for the AWS Service Broker.
      If left blank a role with AdministratorAccess will be created'
    Type: String
  HostedZoneID:
    Description: 'OPTIONAL: Route 53 Hosted Zone ID to use. If left blank route 53
      will not be configured and DNS must be setup manually If you specify this you must also specify DomainName'
    Type: String
    MaxLength: '32'
    Default: ""
  DomainName:
    Description: >-
      OPTIONAL: domain name configured for the cluster, if left blank self signed
      certificates will be used for TLS and the LoadBalancer's auto-generated hostname
      will be used for connections from outside the cluster.
    Type: String
    Default: ""
  SubDomainPrefix:
    Default: ''
    Description: 'OPTIONAL: Subdomain to use, if left blank DomainName will be used
      without a prefix. If you specify this you must also specify DomainName and HostedZoneID'
    Type: String
  HawkularMetrics:
    Default: Enabled
    Description: Enable Hawkular cluster metrics
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/ tags, if left blank will use the stackname suffixed with the region
    Type: String
  IntegreatlyInstall:
    Default: Enabled
    Description: Enable Integreatly Installation
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  IntegreatlyReleaseVersion:
    Description: Integreatly version to deploy
    Default: 'master'
    Type: String
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
Mappings:
  AWSAMIRegionMap:
    AMI:
      RHEL75HVM: RHEL-7.5_HVM_GA-20180322-x86_64-1-Hourly2-GP2
    us-east-1:
      RHEL75HVM: ami-6871a115
    us-east-2:
      RHEL75HVM: ami-03291866
    us-west-1:
      RHEL75HVM: ami-18726478
    us-west-2:
      RHEL75HVM: ami-28e07e50
    ca-central-1:
      RHEL75HVM: ami-49f0762d
    eu-central-1:
      RHEL75HVM: ami-c86c3f23
    eu-west-1:
      RHEL75HVM: ami-7c491f05
    eu-west-2:
      RHEL75HVM: ami-7c1bfd1b
    eu-west-3:
      RHEL75HVM: ami-5026902d
    ap-northeast-1:
      RHEL75HVM: ami-6b0d5f0d
    ap-northeast-2:
      RHEL75HVM: ami-3eee4150
    ap-northeast-3:
      RHEL75HVM: ami-3eee4150
    ap-southeast-1:
      RHEL75HVM: ami-76144b0a
    ap-southeast-2:
      RHEL75HVM: ami-67589505
    ap-south-1:
      RHEL75HVM: ami-5b673c34
    sa-east-1:
      RHEL75HVM: ami-b0b7e3dc 
  LinuxAMINameMap:
    Redhat-Enterprise-Linux-7:
      Code: RHEL75HVM
  OpenshiftVersionMap:
    '3.7':
      AnsiblePlaybookGitRepoTag: 3.7.58-1
    '3.9':
      AnsiblePlaybookGitRepoTag: 3.9.35-1
    '3.10':
      AnsiblePlaybookGitRepoTag: 3.10.41-1
    '3.11':
      AnsiblePlaybookGitRepoTag: v3.11.25-1    
Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  AutoGenOutputBucketName: !Not
    - !Equals
      - !Ref 'OutputBucketName'
      - ''
  EnableAWSServiceBroker: !Equals
    - !Ref 'AWSServiceBroker'
    - Enabled
  CreateAWSServiceBrokerRole: !And
    - !Equals
      - !Ref 'AWSServiceBroker'
      - Enabled
    - !Equals
      - !Ref 'ExistingAWSServiceBrokerRole'
      - ''
  SetupRoute53: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  UseEmailForACMValidation: !And
    - !Equals
      - !Ref 'HostedZoneID'
      - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  SetupSubdomain: !And
    - !Not
      - !Equals
        - !Ref 'SubDomainPrefix'
        - ''
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  UseSubdomain: !Not
    - !Equals
      - !Ref 'SubDomainPrefix'
      - ''
  UseCustomDomain: !Not
    - !Equals
      - !Ref 'DomainName'
      - ''
  EnableHawkular: !Equals
    - !Ref 'HawkularMetrics'
    - Enabled
  Is37: !Equals
    - !Ref 'OpenshiftContainerPlatformVersion'
    - '3.7'
  Is39: !Equals
    - !Ref 'OpenshiftContainerPlatformVersion'
    - '3.9'
  Is310: !Equals
    - !Ref 'OpenshiftContainerPlatformVersion'
    - '3.10'
  Is311: !Equals
  - !Ref 'OpenshiftContainerPlatformVersion'
  - '3.11'
  CustomClusterName: !Not
    - !Equals
      - !Ref ClusterName
      - ""
Resources:
  Route53HostedSubdomainZone:
    Condition: SetupSubdomain
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub '${SubDomainPrefix}.${DomainName}'
  Route53SubdomainNS:
    Condition: SetupSubdomain
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneID'
      Name: !Sub '${SubDomainPrefix}.${DomainName}'
      ResourceRecords: !GetAtt 'Route53HostedSubdomainZone.NameServers'
      Type: NS
      TTL: '600'
  Route53WildCard:
    Condition: SetupRoute53
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Join
        - ''
        - - '*.'
          - !If
            - SetupSubdomain
            - !Sub '${SubDomainPrefix}.'
            - ''
          - !Ref 'DomainName'
      AliasTarget:
        HostedZoneId: !GetAtt 'ContainerAccessELB.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'ContainerAccessELB.DNSName'
      HostedZoneId: !If
        - SetupSubdomain
        - !Ref 'Route53HostedSubdomainZone'
        - !Ref 'HostedZoneID'
  Route53MasterELBRecord:
    Condition: SetupRoute53
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Join
        - ''
        - - !If
            - SetupSubdomain
            - !Sub '${SubDomainPrefix}.'
            - ''
          - !Ref 'DomainName'
      AliasTarget:
        HostedZoneId: !GetAtt 'OpenShiftMasterELB.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'OpenShiftMasterELB.DNSName'
      HostedZoneId: !If
        - SetupSubdomain
        - !Ref 'Route53HostedSubdomainZone'
        - !Ref 'HostedZoneID'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
  KeyGen:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KeyGen/lambda.zip'
      Handler: service.handler
      Runtime: python2.7
      Timeout: '5'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  GetRSA:
    Type: Custom::GenerateKeys
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'KeyGen.Arn'
      ResponseURL: !Join
        - ''
        - - http://ResponseURL
          - !Ref 'AWS::StackId'
          - RequestId
      StackId: !Ref 'AWS::StackId'
      ResourceProperties:
        RequestType: Create
        RequestId: !Join
          - ''
          - - !Ref 'AWS::StackId'
            - RequestId
        LogicalResourceId: KeyGenLogicalResourceId
    DependsOn:
      - KeyGen
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  CopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/KeyGen/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
        - functions/packages/ACMCert/lambda.zip
        - functions/packages/CleanupPV/lambda.zip
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: '128'
      Role: !GetAtt 'DeleteBucketContentsRole.Arn'
      Runtime: python2.7
      Timeout: '300'
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  DeleteBucketContents:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - OutputBucket
    Properties:
      ServiceToken: !GetAtt 'DeleteBucketContentsLambda.Arn'
      OutputBucket: !Ref 'OutputBucket'
  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: deletebucketcontents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  OpenShiftScalingCWEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: OpenShift-QuickStart-SSM-RunCommand
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ssm:SendCommand
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ec2:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :instance/
                      - !Sub '${AnsibleConfigServer}'
                  - !Sub 'arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript'
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: !Join
          - "\n"
          - - import json
            - import logging
            - import threading
            - import boto3
            - import cfnresponse
            - ''
            - ''
            - 'def copy_objects(source_bucket, dest_bucket, prefix, objects):'
            - '    s3 = boto3.client(''s3'')'
            - '    for o in objects:'
            - '        key = prefix + o'
            - '        copy_source = {'
            - '            ''Bucket'': source_bucket,'
            - '            ''Key'': key'
            - '        }'
            - '        print(''copy_source: %s'' % copy_source)'
            - '        print(''dest_bucket = %s''%dest_bucket)'
            - '        print(''key = %s'' %key)'
            - '        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
              Key=key)'
            - ''
            - ''
            - 'def delete_objects(bucket, prefix, objects):'
            - '    s3 = boto3.client(''s3'')'
            - '    objects = {''Objects'': [{''Key'': prefix + o} for o in objects]}'
            - '    s3.delete_objects(Bucket=bucket, Delete=objects)'
            - ''
            - ''
            - 'def timeout(event, context):'
            - '    logging.error(''Execution is about to time out, sending failure
              response to CloudFormation'')'
            - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
            - ''
            - ''
            - 'def handler(event, context):'
            - '    # make sure we send a failure to CloudFormation if the function
              is going to timeout'
            - '    timer = threading.Timer((context.get_remaining_time_in_millis()
              / 1000.00) - 0.5, timeout, args=[event, context])'
            - '    timer.start()'
            - ''
            - '    print(''Received event: %s'' % json.dumps(event))'
            - '    status = cfnresponse.SUCCESS'
            - '    try:'
            - '        source_bucket = event[''ResourceProperties''][''SourceBucket'']'
            - '        dest_bucket = event[''ResourceProperties''][''DestBucket'']'
            - '        prefix = event[''ResourceProperties''][''Prefix'']'
            - '        objects = event[''ResourceProperties''][''Objects'']'
            - '        if event[''RequestType''] == ''Delete'':'
            - '            delete_objects(dest_bucket, prefix, objects)'
            - '        else:'
            - '            copy_objects(source_bucket, dest_bucket, prefix, objects)'
            - '    except Exception as e:'
            - '        logging.error(''Exception: %s'' % e, exc_info=True)'
            - '        status = cfnresponse.FAILED'
            - '    finally:'
            - '        timer.cancel()'
            - '        cfnresponse.send(event, context, status, {}, None)'
            - ''
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - AutoGenOutputBucketName
        - !Ref 'OutputBucketName'
        - !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
      Tags: []
  OpenShiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web console and ssh access to the master instances
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'RemoteAccessCIDR'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'RemoteAccessCIDR'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access to Openshift routers
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'ContainerAccessCIDR'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref 'ContainerAccessCIDR'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  AWSEFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      Encrypted: false
      FileSystemTags:
        - Key: Cluster
          Value: !Ref 'SubDomainPrefix'
        - Key: Name
          Value: !Ref 'SubDomainPrefix'
      PerformanceMode: "generalPurpose"
      ThroughputMode: "bursting"
  AWSEFSMountPoint1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'AWSEFSFileSystem'
      SecurityGroups:
        - !Ref "OpenShiftSecurityGroup"
      SubnetId: !Ref "PrivateSubnet1ID"
  AWSEFSMountPoint2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'AWSEFSFileSystem'
      SecurityGroups:
        - !Ref "OpenShiftSecurityGroup"
      SubnetId: !Ref "PrivateSubnet2ID"
  AWSEFSMountPoint3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'AWSEFSFileSystem'
      SecurityGroups:
        - !Ref "OpenShiftSecurityGroup"
      SubnetId: !Ref "PrivateSubnet3ID"
  SetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
        - PolicyName: WorkloadSetup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - autoscaling:AttachLoadBalancers
                  - ec2:Describe*
                Resource: '*'
        - !If
          - EnableAWSServiceBroker
          - PolicyName: ServiceBroker
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - cloudformation:*
                  Resource: '*'
          - !Ref AWS::NoValue
        - PolicyName: K8s-AWSCloudProvider-requirements
          PolicyDocument:
            Statement:
              - Action:
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteLaunchConfiguration
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:AttachLoadBalancerTargetGroups
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateInternetGateway
                  - ec2:CreateNatGateway
                  - ec2:CreateRoute
                  - ec2:CreateRouteTable
                  - ec2:CreateSecurityGroup
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:CreateVpc
                  - ec2:CreateVolume
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVpcClassicLinkDnsSupport
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifySubnetAttribute
                  - ec2:ModifyVpcAttribute
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteRoute
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DisassociateRouteTable
                  - ec2:ReplaceRouteTableAssociation
                  - ec2:DeleteRouteTable
                  - ec2:DeleteSubnet
                  - ec2:DescribeNetworkInterfaces
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:DeleteNatGateway
                  - ec2:DeleteSecurityGroup
                  - ec2:DetachInternetGateway
                  - ec2:DeleteInternetGateway
                  - ec2:ReleaseAddress
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
                  - ec2:DeleteVpc
                Effect: Allow
                Resource: '*'
              - Action:
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DeleteLoadBalancerListeners
                Effect: Allow
                Resource: '*'
              - Action:
                  - iam:AddRoleToInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:GetInstanceProfile
                  - iam:GetUser
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:ListInstanceProfilesForRole
                  - iam:ListRoles
                  - iam:DeleteRole
                Effect: Allow
                Resource: '*'
              - Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ChangeTagsForResource
                  - route53:GetChange
                  - route53:GetHostedZone
                  - route53:CreateHostedZone
                  - route53:DeleteHostedZone
                  - route53:ListHostedZones
                  - route53:ListResourceRecordSets
                  - route53:ListTagsForResource
                  - route53:UpdateHostedZoneComment
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:GetBucketCors
                  - s3:GetBucketWebsite
                  - s3:GetBucketVersioning
                  - s3:GetAccelerateConfiguration
                  - s3:GetBucketRequestPayment
                  - s3:GetBucketLogging
                  - s3:GetLifecycleConfiguration
                  - s3:GetBucketReplication
                  - s3:GetReplicationConfiguration
                  - s3:GetBucketLocation
                  - s3:GetBucketTagging
                  - s3:DeleteBucket
                  - s3:PutBucketAcl
                  - s3:PutBucketTagging
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                Resource: arn:aws:s3:::*
              - Action:
                  - sts:GetCallerIdentity
                Effect: Allow
                Resource: '*'
              - Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                Effect: Allow
                Resource: !Ref "AWS::StackId"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource:
                  - '*'
  SetupRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'SetupRole'
  OpenshiftLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  OpenShiftMasterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - GetRSA
      - CleanupPV
    Properties:
      LoadBalancerNames:
        - !Ref 'OpenShiftMasterELB'
      DesiredCapacity: !Ref 'NumberOfMaster'
      MaxSize: !Ref 'NumberOfMaster'
      MinSize: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 2400
      LaunchConfigurationName: !Ref 'OpenShiftMasterASLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: openshift-master
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfMaster'
        Timeout: PT45M
  OpenShiftEtcdASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - GetRSA
      - CleanupPV
    Properties:
      DesiredCapacity: !Ref 'NumberOfEtcd'
      MaxSize: !Ref 'NumberOfEtcd'
      MinSize: '2'
      LaunchConfigurationName: !Ref 'OpenShiftEtcdLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: openshift-etcd
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfEtcd'
        Timeout: PT45M
  OpenShiftNodeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - GetRSA
      - CleanupPV
    Properties:
      LoadBalancerNames:
        - !Ref 'ContainerAccessELB'
      DesiredCapacity: !Ref 'NumberOfNodes'
      MaxSize: !Ref 'NumberOfNodes'
      MinSize: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 1200
      LaunchConfigurationName: !Ref 'OpenShiftNodesLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: openshift-nodes
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          PropagateAtLaunch: 'true'
          Value: owned
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfNodes'
        Timeout: PT45M
  OpenShiftEtcdLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Join
                - ''
                - - "#QuickStart Generated\n"
                  - !GetAtt 'GetRSA.PUB'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL75HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
      InstanceMonitoring: 'true'
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'EtcdInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_PASS='${RedhatSubscriptionPassword}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftEtcdLaunchConfig
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftEtcdASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
  OpenShiftNodesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Join
                - ''
                - - "#QuickStart Generated\n"
                  - !GetAtt 'GetRSA.PUB'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL75HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: '110'
            VolumeType: gp2
      InstanceMonitoring: 'true'
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'NodesInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_PASS='${RedhatSubscriptionPassword}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftNodesLaunchConfig
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftNodeASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
  OpenShiftMasterASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: GetRSA
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Join
                - ''
                - - "#QuickStart Generated\n"
                  - !GetAtt 'GetRSA.PUB'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL75HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: '110'
            VolumeType: gp2
      InstanceMonitoring: 'true'
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'MasterInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_PASS='${RedhatSubscriptionPassword}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftMasterASLaunchConfig
            export INTERNAL_MASTER_ELBDNSNAME=${OpenShiftMasterInternalELB.DNSName}
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            echo "$(curl http://169.254.169.254/latest/meta-data/local-ipv4) ${OpenShiftMasterInternalELB.DNSName}" >> /etc/hosts
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftMasterASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
  CleanupPVRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-cleanuppv
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DeleteVolume
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  CleanupPVLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: When the OpenShift Quickstart is deleted this deletes any orphaned
        EBS volumes used as OpenShift Persistent Volumes
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt 'CleanupPVRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/lambda.zip'
  CleanupPV:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'CleanupPVLambda.Arn'
      ClusterId: !Sub '${AWS::StackName}-${AWS::Region}'
  ACMCertificateRole:
    Condition: SetupRoute53
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-acm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:DeleteCertificate
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - !If
                    - SetupSubdomain
                    - !Sub 'arn:aws:route53:::hostedzone/${Route53HostedSubdomainZone}'
                    - !Sub 'arn:aws:route53:::hostedzone/${HostedZoneID}'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  ACMCertificateLambda:
    Condition: SetupRoute53
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates and verifies an ACM certificate using DNS validation and
        route53
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt 'ACMCertificateRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/ACMCert/lambda.zip'
  ACMCertificateDNS:
    Condition: SetupRoute53
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'ACMCertificateLambda.Arn'
      HostedZoneId: !If
        - SetupSubdomain
        - !Ref 'Route53HostedSubdomainZone'
        - !Ref 'HostedZoneID'
      HostNames:
        - !Join
          - ''
          - - !If
              - UseSubdomain
              - !Sub '${SubDomainPrefix}.'
              - ''
            - !Ref 'DomainName'
        - !Join
          - ''
          - - '*.'
            - !If
              - UseSubdomain
              - !Sub '${SubDomainPrefix}.'
              - ''
            - !Ref 'DomainName'
  ACMCertificateEmail:
    Condition: UseEmailForACMValidation
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join
        - ''
        - - !If
            - UseSubdomain
            - !Sub '${SubDomainPrefix}.'
            - ''
          - !Ref 'DomainName'
      SubjectAlternativeNames:
        - !Join
          - ''
          - - '*.'
            - !If
              - UseSubdomain
              - !Sub '${SubDomainPrefix}.'
              - ''
            - !Ref 'DomainName'
      DomainValidationOptions:
        - DomainName: !Join
            - ''
            - - !If
                - UseSubdomain
                - !Sub '${SubDomainPrefix}.'
                - ''
              - !Ref 'DomainName'
          ValidationDomain: !Ref 'DomainName'
  OpenShiftMasterELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
        - !Ref 'PublicSubnet3ID'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      Listeners:
        - InstancePort: '443'
          InstanceProtocol: !If
            - UseCustomDomain
            - SSL
            - TCP
          LoadBalancerPort: '443'
          Protocol: !If
            - UseCustomDomain
            - SSL
            - TCP
          SSLCertificateId: !If
            - UseCustomDomain
            - !If
              - SetupRoute53
              - !GetAtt 'ACMCertificateDNS.Arn'
              - !Ref 'ACMCertificateEmail'
            - !Ref AWS::NoValue
      HealthCheck:
        Target: HTTPS:443/api/
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
  ContainerAccessELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
        - !Ref 'PublicSubnet3ID'
      SecurityGroups:
        - !Ref 'OpenShiftNodeSecurityGroup'
      Listeners:
        - InstancePort: '443'
          InstanceProtocol: !If
            - UseCustomDomain
            - TCP
            - TCP
          LoadBalancerPort: '443'
          Protocol: !If
            - UseCustomDomain
            - TCP
            - TCP
          SSLCertificateId: !If
            - UseCustomDomain
            - !If
              - SetupRoute53
              - !GetAtt 'ACMCertificateDNS.Arn'
              - !Ref 'ACMCertificateEmail'
            - !Ref AWS::NoValue
        - InstancePort: '80'
          InstanceProtocol: TCP
          LoadBalancerPort: '80'
          Protocol: TCP
      HealthCheck:
        Target: TCP:22
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftMasterInternalELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      Subnets:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
      Type: network
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftMasterInternalELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 22
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      Port: 443
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCID
      Tags:
      - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
        Value: owned
  OpenShiftMasterInternalELBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OpenShiftMasterInternalELBTargetGroup
      LoadBalancerArn: !Ref OpenShiftMasterInternalELB
      Port: 443
      Protocol: TCP
  AWSServiceBrokerCFNRole:
    Condition: CreateAWSServiceBrokerRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  AnsibleConfigServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cfg_node_keys:
            - GetPublicKey
            - AddPublicKey
            - SetPrivateKey
          cfg_networkmgr:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
        SetPrivateKey:
          files:
            /root/.ssh/id_rsa:
              content: !Join
                - ''
                - - !GetAtt 'GetRSA.PEM'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Join
                - ''
                - - "#QuickStart Generated\n"
                  - !GetAtt 'GetRSA.PUB'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL75HVM
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      Tags:
        - Key: Name
          Value: ansible-configserver
      InstanceType: !Ref 'MasterInstanceType'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'OpenShiftSecurityGroup'
          SubnetId: !Ref 'PublicSubnet1ID'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            export QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            export ENABLE_HAWKULAR=${HawkEnable}
            export OCP_ANSIBLE_RELEASE=${OsbRelease}
            export AWSSB_ROLE=${AwsSbRole}
            export MASTER_ELBDNSNAME=${LbHostname}
            export INTERNAL_MASTER_ELBDNSNAME=${OpenShiftMasterInternalELB.DNSName}
            export OPENSHIFTMASTERINTERNALELB=${OpenShiftMasterInternalELB}
            export OPENSHIFTMASTERINTERNALTGARN=${OpenShiftMasterInternalELBTargetGroup}
            export AWS_REGION=${AWS::Region}
            export CONTAINERACCESSELB=${ContainerAccessELB}
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_PASS='${RedhatSubscriptionPassword}'
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export AWS_STACKNAME=${AWS::StackName}
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export OCP_PASS='${OpenShiftAdminPassword}'
            export AWS_STACKID=${AWS::StackId}
            export ENABLE_AWSSB=${AWSServiceBroker}
            export VPCID=${VPCID}
            export INTEGREATLY_RELEASE_VERSION=${IntegreatlyReleaseVersion}
            export INTEGREATLY_INSTALL=${IntegreatlyInstall}
            export SUBDOMAIN_PREFIX=${SubDomainPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            aws s3 cp ${!QS_S3URI}scripts/ansibleconfigserver_bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " Openshift installation failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource AnsibleConfigServer --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
            AwsSbRole: !If [ CreateAWSServiceBrokerRole, !GetAtt 'AWSServiceBrokerCFNRole.Arn', !Ref 'ExistingAWSServiceBrokerRole' ]
            HawkEnable: !If [ EnableHawkular, "True", "False" ]
            OsbRelease: !FindInMap [ OpenshiftVersionMap, !Ref 'OpenshiftContainerPlatformVersion', AnsiblePlaybookGitRepoTag ]
            LbHostname: !If [ UseCustomDomain, !If [ UseSubdomain, !Sub "${SubDomainPrefix}.${DomainName}", !Ref "DomainName" ], !GetAtt OpenShiftMasterELB.DNSName ]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT360M
  OpenShiftScalingCWEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: CWEvent rule to trigger OpenShift Scaling scripts within the Ansible
        config server. (AWS QuickStart)
      Name: !Sub 'OSE-Trigger-${SubDomainPrefix}'
      State: ENABLED
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
          - EC2 Instance Terminate Successful
          - EC2 Instance Terminate Unsuccessful
        detail:
          AutoScalingGroupName:
            - !Ref 'OpenShiftMasterASG'
            - !Ref 'OpenShiftEtcdASG'
            - !Ref 'OpenShiftNodeASG'
      Targets:
        - Id: OSEScalingSSMTarget1
          Arn: !Sub 'arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript'
          Input: !Sub '{"commands":["/bin/aws-ose-qs-scale --scale-in-progress --debug --ocp-version=${OpenshiftContainerPlatformVersion}"],"workingDirectory":["/"],"executionTimeout":["3600"]}'
          RoleArn: !GetAtt 'OpenShiftScalingCWEventRole.Arn'
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - !Ref 'AnsibleConfigServer'
Outputs:
  OpenShiftUI:
    Description: The URL OpenShiftUI
    Value: !Join
      - ''
      - - https://
        - !If [ UseCustomDomain, !If [ UseSubdomain, !Sub "${SubDomainPrefix}.${DomainName}", !Ref "DomainName" ], !GetAtt OpenShiftMasterELB.DNSName ]
  ContainerAccessELBName:
    Description: Use this ELB to expose ports to the internet
    Value: !Join
      - ''
      - - http://
        - !GetAtt 'ContainerAccessELB.DNSName'
